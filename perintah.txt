1. npm init -y
2. npm install ejs pg express sequelize
3. npm i --save-dev sequelize-cli nodemon
4. npx sequelize-cli init
5. setup database dulu
6. npx sequelize-cli db:create
7. buat schema dulu
8. buat table dan column
formatnya >>> npx sequelize-cli model:generate --name (nama table) --attributes (nama column:typedata)

Table:Users
npx sequelize-cli model:generate --name User --attributes username:string,password:string,role:string

Table:Profiles
npx sequelize-cli model:generate --name Profile --attributes name:string,address:string,phone:string

migrasi FK: UserId (add-userid-to-profile)
pakai await queryInterface.addColumn dan await queryInterface.removeColumn

Table: Items
npx sequelize-cli model:generate --name Item --attributes name:string,stock:integer,imageURL:string,description:string,condition:string,price:integer

migrasi FK: UserId (add-userid-to-item)

Table: Categories
npx sequelize-cli model:generate --name Category --attributes name:string 


isi kolum nya name:string karena di kolom nama ada clothes, electronics, accessories, automotives, sports

Table: itemCategories
npx sequelize-cli model:generate --name ItemCategory --attributes ItemId:integer,CategoryId:integer


9. Migrasi semua column
npx sequelize-cli db:migrate 
npx sequelize-cli db:migrate:undo:all (buat undo)

10. Sekarang buat seedersnya
(kalau bisa semua datanya dibuat json saja)

npx sequelize-cli seed:generate --name (nama seedernya)

Jangan lupa di seeders kalau ada data json dibaca dulu lalu di map terus di await


<---Test run commit-->>

Catatan:
Users belum ditentuin id nya
ItemCategories juga belum ditentuin

Validasi:

Items.init({
    name: {
        type: DataTypes.STRING,
        allowNull: false,
        validate: {
            notEmpty: {
                msg: "Name is required"
            },
            notNull: {
                msg: "Name is required"
            },
        },
    },
    stock: {
        type: DataTypes.INTEGER,
        allowNull: false,
        validate: {
            notEmpty: {
                msg: "Stock is required"
            },
            notNull: {
                msg: "Stock is required"
            },
        },
    }, 
    imageURL: {
        type: DataTypes.STRING,
        allowNull: false,
        validate: {
            notEmpty: {
                msg: "Image URL is required"
            },
            notNull: {
                msg: "Image URL is required"
            },
        },
    },
    description: {
        type: DataTypes.STRING,
        allowNull : false,
        validate: {
            notEmpty: {
                msg: "Description is required"
            },
            notNull: {
                msg: "Description is required"
            },
        },
    },
    condition: {
        type: DataTypes.STRING,
        allowNull : false,
        validate: {
            notEmpty: {
                msg: "Condition is required"
            },
            notNull: {
                msg: "Condition is required"
            },
        },
    },
    price: {
        type: DataTypes.INTEGER,
        allowNull : false,
        validate: {
            notNull: {
                msg: "Condition is required"
            },
        },
    },
    UserId: DataTypes.INTEGER
  }, {
    // Tambahin hooks disini
    hooks: {
      beforeCreate: (instance, options) => {
        // ada ide buat hooks sederhana
        // save nama item selalu dalam bentuk huruf besar/kecil
        // memastikan harga (price) lebih besar dari nol:
        // Default value untuk column tertentu
      }
    },
    sequelize,
    modelName: 'Items',
  });
  return Items;


  Ide static method

    saring item berdasarkan condition

  static getItemsByCondition(condition) {
  return this.findAll({
    where: {
      condition: condition
    }
  })
}

saring item berdasarkan harga
static getItemsByPriceRange(minPrice, maxPrice) {
  return this.findAll({
    where: {
      price: {
        [Op.between]: [minPrice, maxPrice]
      }
    },
    order: [['price', 'ASC']]
  })
}

ide getter

Menampilkan stock statis
get stockStatus() {
  if (this.stock === 0) return 'Barang sudah habis'
  if (this.stock <= 5) return 'Hampir habis'
  return 'In Stock'
}

Menampilkan description versi shortnya
get shortDescription() {
  return this.description.length > 100 
    ? this.description.substring(0, 100) + '...' 
    : this.description
}